// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @unique @default(uuid())
  email String @unique
  hashedPassword String
  location String?
  phone_number String?
  passwordToken String?
  verificationToken String?
  farmingExperience String?
  role     Role    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  cropPractices CropPractice[]

  animalRearing LiveStock[]
  postexperience Post[]
  commentFarmer  Comment[]
  ratings Rating[]
  order Order[]
  product Product[]
  alert Alert[]
  soilTest SoilTest[]
}
enum Role {
  user
  farmer
  admin
}

model CropPractice {
  id          Int      @id @default(autoincrement())
  crop_id        String   @default(uuid())
  crop              CropTracker     @relation(fields: [cropId], references: [id])
  species           String
  image             String?
  Planting_method   String 
  description          String
  plantingSeason       String
  pests                String[]
  irrigationTechniques String[] 
  createdById       String?
  createdBy         User?     @relation(fields: [createdById], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  // Foreign key to relate CropPractice to Crop
  cropId            Int
  dronedata DroneData[]
  cropgrowthData CropGrowthData[]
}

model CropTracker {
  id                Int      @id @default(autoincrement())
  name              String
  variety      String?  @db.VarChar(255)
  plantedAt    DateTime
  harvestedAt  DateTime?
  yieldInKg         Int      // In kilograms
  total_price       Int   // Price per kilogram
  costPrice      Int
  marketPrice  Float?
  profit            Int
  costOfSeeds Int?
  fertilizer  Int?
  feed        Int?
  rentEquipment    Int?
  transportationFees Int?
  plantingDate      DateTime
  harvestDate       DateTime
  
  // Relation with CropPractice
  cropPractice       CropPractice[]
}


model LiveStock {
  id          Int      @id @default(autoincrement())
  animal             LivestockTracker    @relation(fields: [animalId], references: [id])
  species           String
  description    String
  breedingSeason String
  feedingGuide   String
  breed     String
  gender    String
  dateOfBirth DateTime
  dateOfPurchase DateTime
  healthStatus String
  pests          String[]
  image             String? 
  createdById       String?
  owner         User?     @relation(fields: [createdById], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  // Foreign key to relate CropPractice to Crop
  animalId            Int
  livestockmgtInfo LivestockManagementInfo[]
}

model LivestockTracker {
  id                Int      @id @default(autoincrement())
  name              String
  type         String?  @db.VarChar(255)
  breed        String?  @db.VarChar(255)
  birthDate    DateTime?
  weight       Float?
  yieldInKg         Int      // In kilograms
  total_price       Int   // Price per kilogram
  costPrice      Int
  marketPrice  Float?
  profit            Int
  costOfFeed Int?
  vaccines  Int?
  drug        Int?
  sanitation    Int?
  transportationFees Int?
  mortalityRate Int?
  plantingDate      DateTime
  harvestDate       DateTime
  
  // Relation with CropPractice
  livestock      LiveStock[]
}


model Post {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  createdAt DateTime @default(now())
  author   User     @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

// MARKET POINT

model Product {
  id          Int           @id @default(autoincrement())
  image         String?
  name        String
  description String?
  price       Float
  quantity    Int
  farmer      User          @relation(fields: [farmerId], references: [id])
  farmerId    String
  ratings     Rating[]
  order       Order[]
  oneItem     SingleOrderItem[]
}

model Order {
  id            Int              @id @default(autoincrement())
  image         String?
  quantity      Int?
  shippingFee     Float
  category      Category
  subtotal        Float
  total           Float
  status        String           @default("Pending")
  featured      Boolean?    @default(false)
  freeShipping  Boolean ?    @default(false)
  inventory     Int         @default(15)
  averageRating Float?      @default(0)
  numOfReviews  Int?         @default(0)
  orderItems    SingleOrderItem[]
  createdAt     DateTime         @default(now())
  user          User             @relation(fields: [farmerId], references: [id])
  farmerId      String
  product       Product          @relation(fields: [productId], references: [id])
  productId     Int
}
enum Category {
  Animal
  Crop
}

model SingleOrderItem {
  id            String           @id @default(cuid())
  name          String
  image         String?
  price         Int
  product       Product          @relation(fields: [productId], references: [id])
  productId     Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  order         Order?           @relation(fields: [orderId], references: [id])
  orderId       Int?
}

model Rating {
  id            Int              @id @default(autoincrement())
  rating        Int
  review        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  farmer        User             @relation(fields: [farmerId], references: [id])
  farmerId      String
  product       Product          @relation(fields: [productId], references: [id])
  productId     Int
}

// SMS BASED ALERT
model Alert {
  id         Int      @id @default(autoincrement())
  message    String
  timestamp  DateTime @default(now())
  farmer     User?   @relation(fields: [farmerId], references: [id])
  farmerId   String
  cropId     Int
}

// SOIL TEST
model SoilTest {
  id            Int       @id @default(autoincrement())
  testDate      DateTime  @default(now())
  pHLevel       Float
  nitrogen      Float?
  phosphorus    Float?
  potassium     Float?
  farmer        User?    @relation(fields: [farmerId], references: [id])
  farmerId      String
}

// DRONEDATA

model DroneData {
  id            String    @id @default(uuid())
  crop          CropPractice      @relation(fields: [cropId], references: [id])
  cropId        Int
  date          DateTime
  health        String
  growthPattern String
  images        String[]
  temperature   Float?
  humidity      Float?
  windSpeed     Float?
}


// LivestockManagementInfo model
model LivestockManagementInfo {
  id           Int      @id @default(autoincrement())
  livestockId  Int
  livestock    LiveStock @relation(fields: [livestockId], references: [id])
  infoType     String
  infoContent  String
  language     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Translation model
model Translation {
  id           Int      @id @default(autoincrement())
  sourceLanguage  String
  targetLanguage  String
  translatedContent  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// VoiceInterface model
model VoiceInterface {
  id           Int      @id @default(autoincrement())
  livestockId  Int
  voiceCommand  String
  voiceResponse  String
  language     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//WEATHER INFO
// WeatherStation model
model WeatherStation {
  id            Int      @id @default(autoincrement())
  name          String
  location      String
  latitude      Float
  longitude     Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  weatherdata WeatherData[]
}

// WeatherData model
model WeatherData {
  id            Int      @id @default(autoincrement())
  weatherStationId  Int
  weatherStation    WeatherStation @relation(fields: [weatherStationId], references: [id])
  timestamp     DateTime
  temperature   Float
  humidity      Float
  rainfall      Float
  windSpeed     Float
  windDirection String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


// CropGrowthData model
model CropGrowthData {
  id            Int      @id @default(autoincrement())
  cropId        Int
  crop          CropPractice    @relation(fields: [cropId], references: [id])
  timestamp     DateTime
  temperature   Float
  rainfall      Float
  humidity      Float
  growthStage   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
